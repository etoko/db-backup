#!/bin/bash
#Version 1.3.4
# -backup
#
#####################################################################
# Script does four things;
# -Back up a database to path
# -Compress the backup using gzip compression tool
# -Encrypt the backup
# -rsync the backup directory to (a) file server(s).
# 
##################################################################
# Created: Emmanuel Toko 2010-09-21 14:41 0.1
#####################################################################

#Variables
DATE=`date +%F~%T`
FILENAME="$HOME" "backups/db-name-$DATE.sql"
LOGFILE="$HOME" "backups/log/backup-log"
BACKUPDIR="$HOME" "/home/user/backups/"
MKDIR=/bin/mkdir
TOUCH=/usr/bin/touch
LOGGER=/usr/bin/logger

if [ -e $BACKUPDIR ]
then
	echo "Backup directory exists"
else
	$MKDIR -p $BACKUPDIR/log
	$TOUCH $LOGFILE
fi

get_host() {

HOSTS=("${@}")


for RHOST in ${HOSTS[@]}
do
    HOST=`echo RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
    
    count=$(ping -c $COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
    if [ $count -eq $SUCCESS_STATUS ]; then
    # 100% failed
        OFFLINE_HOSTS=$OFFLINE_HOSTS" "$RHOST
        log_failure_msg "$RHOST is down ($?)"
        #echo "Host : $RHOST is down (ping failed) at $(date)" #| mail -s "$SUBJECT" $EMAILID
        #echo "Host : $RHOST is down (ping failed) at $(date)" &>>$LOGFILE
        echo "Host : $RHOST is down (ping failed) at $(date)" | tee -a $LOGFILE
    else
        log_action_begin_msg "Copying backups to host: $RHOST"
        $RSYNC -ar $BACKUPDIR $RHOST
        if [ "$?" -eq "$SUCCESS_STATUS" ]
        then
            log_action_end_msg "$?"
            echo "Successfully copied backups to host: $RHOST" | tee -a $LOGFILE
        else
            log_failure_msg "$?"
            echo "Experienced an error when copying the backups to host: $RHOST" | tee -a $LOGFILE
        fi
        #echo "$RHOST is online"
    fi
done
echo $1	$2
}

get_host $RHOST
echo "$1"

exit

##Space separated list of backup hosts Backup hosts
RHOSTS=(
	"user1@172.16.126.11:backups/ /" 
	"user2@172.16.126.9:home/backup/" 
	"user3@172.16.5.3:backups/" 
	"user4@172.16.5.1:backups"
)

get_host
exit 0

#Programs
MYSQLDUMP=/usr/bin/mysqldump
GPG=/usr/bin/gpg
PING=/bin/ping
RSYNC=/usr/bin/rsync
GZIP=/bin/gzip
UNLINK=/usr/bin/unlink

#Load VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#LSB log-* functions
. /lib/lsb/init-functions

[ -x "$MYSQLDUMP" ] || exit 1

log_failure_msg "mysqldump was not installed"
exit 1

if [ ! -x $GPG ]
then
	log_warning_msg "gpg is not installed backup won't be encrypted"
fi
echo "**********************************************************" &>> $LOGFILE

echo
echo "  Backup operations for date: $DATE" &>>$LOGFILE

#Backup   db
echo "Backing up   database..." &>> $LOGFILE
log_action_begin_msg "Backing up   database..."
$MYSQLDUMP -u   -ppasswd   > $FILENAME

SUCCESS_STATUS=0

if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
else
	log_failure_msg "$?"
	echo "Encountered an error during backup $?" &>> $LOGFILE 
	exit 1
fi

#Compress file
echo "Compressing   db dump... $FILENAME" &>>$LOGFILE
log_action_begin_msg "Compressing   backup using gzip..."
$GZIP $FILENAME
if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
	echo "...successfully compressed db dump $FILENAME" &>>$LOGFILE	
else
	log_failure_msg "$?"
	echo "...Experienced an error while compressing file $FILENAME" &>>$LOGFILE
	exit 1 #Consider making it possible to send backup files despite the fact that they may not be well compressed
fi

log_action_begin_msg "Encrypting backup"
FILE_EXTENSION=".gz"
COMPRESSED_FILENAME=$FILENAME$FILE_EXTENSION
$GPG --yes --passphrase="your_passphrase" -c $COMPRESSED_FILENAME
 	
if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
	echo "successfully encrypted backup" &>>$LOGFILE
	$UNLINK $COMPRESSED_FILENAME
else
	log_failure_msg "$?"
	echo "experienced an error during encryption" &>>$LOGFILE
fi

#Copy files to file server
echo "Copying backups to file server..."&>>$LOGFILE
#log_action_begin_msg "Copying backups to file server ..."

# number of ping requests
COUNT=5

# email report when
SUBJECT="Ping failed"
EMAILID="admin@localhost"
OFFLINE_HOSTS=""


sleep 120 #wait 2 minute(s) before we attempt to reconnect to the failed/offline hosts to see if they are back online

log_action_begin_msg "Trying to copy (again) to failed hosts"

for RHOST in $OFFLINE_HOSTS
do
    HOST=`echo $RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
    
    count=$(ping -c $COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
    if [ $count -eq $SUCCESS_STATUS ]; then
    # 100% failed
        $OFFLINE_HOSTS=$OFFLINE_HOSTS+$RHOST
        log_failure_msg "$RHOST is down ($?)"
        echo "Host : $RHOST is down (ping failed) at $(date)" | tee -a $LOGFILE
    else
        log_action_begin_msg "Copying backups to host: $RHOST"
        $RSYNC -ar $BACKUPDIR $RHOST
        if [ "$?" -eq "$SUCCESS_STATUS" ]
        then
            log_action_end_msg "$?"
            echo "Successfully copied backups to host: $RHOST" | tee -a $LOGFILE
        else
            log_failure_msg "$?"
            echo "Experienced an error when copying the backups to host: $RHOST" | tee -a $LOGFILE
        fi
        #echo "$RHOST is online"
    fi
done

exit 0
