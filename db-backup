#!/bin/bash
#Version 1.3.4
#db-backup
#
#####################################################################
# Script does four things;
# -Back up a database to path
# -Compress the backup using gzip compression tool
# -Encrypt the backup
# -rsync the backup directory to (a) file server(s).
# 
##################################################################
# Created: Emmanuel Toko 2010-09-21 14:41 0.1
#####################################################################

#Variables
DATE=`date +%F~%T`
ALIAS=test
FILENAME="$HOME""/""$ALIAS-backups/$ALIAS-$DATE.sql"
LOGFILE="$HOME""/$ALIAS-backups/log/$ALIAS-backup-log"
BACKUPDIR="$HOME""/$ALIAS-backups/"
DB_USER=$ALIAS

#Programs
MKDIR=/bin/mkdir
TOUCH=/usr/bin/touch
LOGGER=/usr/bin/logger
MYSQLDUMP=/usr/bin/mysqldump
GPG=/usr/bin/gpg
PING=/bin/ping
RSYNC=/usr/bin/rsync
SCP=/usr/bin/scp
GZIP=/bin/gzip
UNLINK=/usr/bin/unlink

if [ ! -e $BACKUPDIR ]
then
	$MKDIR -p $BACKUPDIR/log
	$TOUCH $LOGFILE
fi

#Load VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#LSB log-* functions
. /lib/lsb/init-functions

[ -x "$MYSQLDUMP" ] || exit 1

SUCCESS_STATUS=0

###dump db, compress & encrypt
backup ()
{
    #Backup   db
    log_action_begin_msg "Backing up database"
    $MYSQLDUMP -u $DB_USER -ppassword $ALIAS  > $FILENAME
    
    if [ "$?" -eq "$SUCCESS_STATUS" ]
    then
    	log_action_end_msg 0
    else
	log_end_msg 1
    	#log_failure_msg "Encountered an error during backup"
	$LOGGER "Encountered error when creating $FILENAME dump"
    	exit 1
    fi
    
    #Compress file
    log_action_begin_msg "Compressing backup using gzip"
    $GZIP $FILENAME
    if [ "$?" -eq "$SUCCESS_STATUS" ]
    then
    	log_action_end_msg 0
    	$LOGGER "Successfully compressed $ALIAS dump $FILENAME"
    else
    	log_action_end_msg 1
    	$LOGGER "Experienced error while compressing dump $FILENAME"
    	exit 1 #Consider making it possible to send backup files despite the fact that they may not be well compressed
    fi
    
    log_action_begin_msg "Encrypting dump"
    FILE_EXTENSION=".gz"
    COMPRESSED_FILENAME=$FILENAME$FILE_EXTENSION
    $GPG -q --yes --passphrase="your_passphrase" -c $COMPRESSED_FILENAME
     	
    if [ "$?" -eq "$SUCCESS_STATUS" ]
    then
    	log_end_msg 0
    	$LOGGER "successfully encrypted dump $FILENAME"
    	$UNLINK $COMPRESSED_FILENAME
    else
    	log_end_msg 1
    	$LOGGER "experienced error while encrypting $FILENAME"
    fi
} #End backup function

OFFLINE_HOSTS=""

##################################
#function rsyncs files to host(s)
###########
rscopy() {

    HOSTS=("${@}")
    #HOSTS=(`echo "$@"`)
    #HOSTS=(`echo “$@”`)
     
    PING_COUNT=5 # number of pings

    #for RHOST in ${HOSTS[@]}
    for RHOST in ${HOSTS[*]}
    do
        HOST=`echo $RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
         
        COUNT=$(ping -c $PING_COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
        if [ $COUNT -eq $SUCCESS_STATUS ]; then #name of the variable 'SUCCESS_STATUS' is kind of a misnomer here
            # 100% failed $RHOST is offline!!!
            OFFLINE_HOSTS=$OFFLINE_HOSTS" "$RHOST
            log_warning_msg "$HOST is probably down/offline"
            #echo "Host : $RHOST is down (ping failed) at $(date)" #| mail -s "$SUBJECT" $EMAILID
            $LOGGER "$RHOST is down (ping failed) at $(date)"
        else
            #$RHOST is online
            log_action_begin_msg "Copying backup(s) to host: $RHOST"
            $RSYNC -ar $BACKUPDIR $RHOST
            if [ "$?" -eq "$SUCCESS_STATUS" ]
            then
                log_action_end_msg 0
            else
                log_action_end_msg 1
                $LOGGER "Experienced error copying backup(s) to $RHOST" 
            fi
        fi
        done

        exit 0
}

scopy() {
    
    HOSTS=("${@}")
    #HOSTS=(`echo "$@"`)
    #HOSTS=(`echo “$@”`)
     
    PING_COUNT=5 # number of pings

    #for RHOST in ${HOSTS[@]}
    for RHOST in ${HOSTS[*]}
    do
        HOST=`echo $RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
         
        COUNT=$(ping -c $PING_COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
        if [ $COUNT -eq $SUCCESS_STATUS ]; then #name of the variable 'SUCCESS_STATUS' is kind of a misnomer here
            # 100% failed $RHOST is offline!!!
            OFFLINE_HOSTS=$OFFLINE_HOSTS" "$RHOST
            log_warning_msg "$HOST is probably down/offline"
            #echo "Host : $RHOST is down (ping failed) at $(date)" #| mail -s "$SUBJECT" $EMAILID
            $LOGGER "$RHOST is down (ping failed) at $(date)"
        else
            #$RHOST is online
            log_action_begin_msg "Copying $FILENAME to host: $RHOST"
            $SCP "$COMPRESSED_FILENAME"".gpg" $RHOST
            if [ "$?" -eq "$SUCCESS_STATUS" ]
            then
                log_action_end_msg 0
            else
                log_action_end_msg 1
                $LOGGER "Experienced error copying backup to $RHOST" 
            fi
        fi
        done

        exit 0
}

#if [ -n $? ]
#then
#    rscopy $?
#    exit 0	
#fi

##Space separated list of backup hosts Backup hosts
RHOSTS=( 
	"user1@172.16.126.11:backups/" 
	"user2@172.16.126.9:home/backup/" 
	"user3@172.16.5.3:backups/" 
	"user4@172.16.5.1:backups" 
)

#options ()
#{
#	HOST=$
#	retries=$4
#}

while [ $# -ge 0 ]; do    # Until you run out of parameters . . .
 case "$1" in

       -V|--version)
                  echo "db-back 0.18 Emmanuel Toko"
                  echo "Released under the GNU GPL."
                  echo 
                  exit 0
                  ;;
       
       -v|--verbose)
                  # print verbose info during backup
                  DEBUG=1
                  ;;
       -h|--host)
                 HOST="$2"
                 shift
                 rscopy $HOST
                echo $HOST 
                exit 0
                 ;;
       -H)
                HOST="$2"
                shift
                backup
                scopy $HOST
                echo $HOST 
                exit 0
                 ;;
       "")
                   if [ ! -x $GPG ]
                   then
                       log_warning_msg "gpg is not installed backup won't be encrypted"
                       echo "Do you want to backup without encryption? y/n "
                       
                       read CONFIRMATION
                   
                       case "$CONFIRMATION" in
                           y ) log_warning_msg "Backing up without encryption"
                               backup
                               rscopy $?
                               exit 0
                            ;;
                           n ) exit 0 ;;
                           * ) echo "Enter y or n";;
                       esac
                   fi
                  backup
                  ARG1=`echo ${RHOSTS[*]}`
                  rscopy $ARG1
                  sleep 240 #wait 4 minute(s) before we attempt to reconnect to the failed/offline hosts to see if they are back online
                  
                  log_action_begin_msg "Trying to copy (again) to failed hosts"
                  rscopy $OFFLINE_HOSTS
        	  exit 0
                  ;;
      # -d|--delay)
		#			TODO
      #            ;;
      # -r|retries)
		#			TODO
      #            ;;
     esac
     shift       # Check next set of parameters.
   done

exit 0

#Copy files to file server
#echo "Copying backups to file server..."&>>$LOGFILE
#log_action_begin_msg "Copying backups to file server ..."


# email report when
SUBJECT="Ping failed"
EMAILID="admin@localhost"


exit 0
