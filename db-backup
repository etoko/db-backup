#!/bin/bash
#Version 1.1.3
#db-backup
#
#####################################################################
# Script does four things;
# -Back up database to path /home/user/user_home/user_backup
# -Compress the backup using gzip compression tool
# -Encrypt the backup
# -rsync the backup directory to (a) file server(s).
# 
##################################################################

#Variables
DATE=`date +%F~%T`
FILENAME=/home/user/backups/db-name-$DATE.sql
LOGFILE=/home/user/backups/log/backup-log
BACKUPDIR=/home/user/backups/
MKDIR=/bin/mkdir
TOUCH=/usr/bin/touch

if [ -e $BACKUPDIR ]
then
	echo "Backup directory exists"
else
	$MKDIR -p $BACKUPDIR/log
	$TOUCH $LOGFILE
fi

##Space separated list of backup hosts Backup hosts
RHOSTS="user1@192.168.1.100:backups/user/ user2@172.16.1.20:user_home/user_backup/ user3@192.168.5.3:user/backups/ user4@10.10.10.1:user/backups"

#Programs
MYSQLDUMP=/usr/bin/mysqldump
GPG=/usr/bin/gpg
PING=/bin/ping
RSYNC=/usr/bin/rsync
GZIP=/bin/gzip
UNLINK=/usr/bin/unlink

#Load VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#LSB log-* functions
. /lib/lsb/init-functions

if [ ! -x $MYSQLDUMP ]
then
	log_failure_msg "mysqldump was not installed"
	exit 1
fi

if [ ! -x $GPG ]
then
	log_warning_msg "gpg is not installed backup won't be encrypted"
fi
echo "**********************************************************" &>> $LOGFILE

echo
echo "user Backup operations for date: $DATE" &>>$LOGFILE

#Backup user db
echo "Backing up user database..." &>> $LOGFILE
log_action_begin_msg "Backing up user database..."
$MYSQLDUMP -u user -p1nvene0 user > $FILENAME

SUCCESS_STATUS=0

if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
else
	log_failure_msg "$?"
	echo "Encountered an error during backup $?" &>> $LOGFILE 
	exit 1
fi

#Compress file
echo "Compressing user db dump... $FILENAME" &>>$LOGFILE
log_action_begin_msg "Compressing user backup using gzip..."
$GZIP $FILENAME
if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
	echo "...successfully compressed db dump $FILENAME" &>>$LOGFILE	
else
	log_failure_msg "$?"
	echo "...Experienced an error while compressing file $FILENAME" &>>$LOGFILE
	exit 1 #Consider making it possible to send backup files despite the fact that they may not be well compressed
fi

log_action_begin_msg "Encrypting backup"
FILE_EXTENSION=".gz"
COMPRESSED_FILENAME=$FILENAME$FILE_EXTENSION
$GPG --yes --passphrase="your_pa55phr9s3" -c $COMPRESSED_FILENAME
 	
if [ "$?" -eq "$SUCCESS_STATUS" ]
then
	log_action_end_msg "$?"
	echo "successfully encrypted backup" &>>$LOGFILE
	$UNLINK $COMPRESSED_FILENAME
else
	log_failure_msg "$?"
	echo "experienced an error during encryption" &>>$LOGFILE
fi

#Copy files to file server
echo "Copying backups to file server..."&>>$LOGFILE
#log_action_begin_msg "Copying backups to file server ..."

# number of ping requests
COUNT=5

# email report when
SUBJECT="Ping failed"
EMAILID="user@localhost"
OFFLINE_HOSTS=""

for RHOST in $RHOSTS
do
    HOST=`echo $RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
    
    count=$(ping -c $COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
    if [ $count -eq $SUCCESS_STATUS ]; then
    # 100% failed
        OFFLINE_HOSTS=$OFFLINE_HOSTS" "$RHOST
        log_failure_msg "$RHOST is down ($?)"
        #echo "Host : $RHOST is down (ping failed) at $(date)" #| mail -s "$SUBJECT" $EMAILID
        #echo "Host : $RHOST is down (ping failed) at $(date)" &>>$LOGFILE
        echo "Host : $RHOST is down (ping failed) at $(date)" | tee -a $LOGFILE
    else
        log_action_begin_msg "Copying backups to host: $RHOST"
        $RSYNC -ar $BACKUPDIR $RHOST
        if [ "$?" -eq "$SUCCESS_STATUS" ]
        then
            log_action_end_msg "$?"
            echo "Successfully copied backups to host: $RHOST" | tee -a $LOGFILE
        else
            log_failure_msg "$?"
            echo "Experienced an error when copying the backups to host: $RHOST" | tee -a $LOGFILE
        fi
        #echo "$RHOST is online"
    fi
done

sleep 120 #wait 2 minute(s) before we attempt to reconnect to the failed/offline hosts to see if they are back online

log_action_begin_msg "Trying to copy (again) to failed hosts"

for RHOST in $OFFLINE_HOSTS
do
    HOST=`echo $RHOST | cut -d':' -f 1 | cut -d'@' -f 2`
    
    count=$(ping -c $COUNT $HOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
    if [ $count -eq $SUCCESS_STATUS ]; then
    # 100% failed
        $OFFLINE_HOSTS=$OFFLINE_HOSTS+$RHOST
        log_failure_msg "$RHOST is down ($?)"
        echo "Host : $RHOST is down (ping failed) at $(date)" | tee -a $LOGFILE
    else
        log_action_begin_msg "Copying backups to host: $RHOST"
        $RSYNC -ar $BACKUPDIR $RHOST
        if [ "$?" -eq "$SUCCESS_STATUS" ]
        then
            log_action_end_msg "$?"
            echo "Successfully copied backups to host: $RHOST" | tee -a $LOGFILE
        else
            log_failure_msg "$?"
            echo "Experienced an error when copying the backups to host: $RHOST" | tee -a $LOGFILE
        fi
        #echo "$RHOST is online"
    fi
done

exit 0
